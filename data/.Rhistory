sex == "T",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01") %>%
select(geo, time, pop = values)
# Join everything together
hh.all <- left_join(hh, hdd.rollmeans, by = c("geo", "time")) %>%
left_join(pop, by = c("geo", "time")) %>%
left_join(heat.demand, by = "geo") %>%
# Switch from KTOE to MTOE
mutate(values = values/1000) %>%
# Climate corrected values
mutate(climate = (values*demand/hdd.ind + values*(1-demand))) %>%
# Climate corrected values, in kg/capita
mutate(climatecapita = climate/pop*1000000000) %>%
rename(absolute = values) %>%
select(geo, time, absolute, climate, climatecapita)
# 4. Share of renewables, with and without biomass
siec.values <- c("TOTAL", "RA000", "RA200", "RA410", "RA600")
hh.renew <- filter(energy.balance.raw,
nrg_bal == "FC_OTH_HH_E",
siec %in% siec.values,
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01")
hh.renew.wide <- pivot_wider(hh.renew, names_from = siec, values_from = values) %>%
mutate(share = round(RA000/TOTAL*100, 1)) %>%
## RA200 = Geothermal, RA410 = Solarthermal, RA600 = Ambient heat
mutate(sharenobiom = round((RA200 + RA410 + RA600)/TOTAL*100, 1)) %>%
select(geo, time, share, sharenobiom)
# 5. Housing and energy poverty
# Get the data on bad housing conditions from Eurostat, and filter
housing.raw <- get_eurostat("ilc_mdho01")
housing <- filter(housing.raw,
sex == "T",
age == "TOTAL",
!(geo %in% aggregates),
!(geo %in% nonmembers),
incgrp == "TOTAL",
hhtyp == "TOTAL",
time > "2004-01-01") %>%
rename(share = values) %>%
select(geo, time, share)
# Get the data on energy poverty from Eurostat, and filter
poverty.raw <- get_eurostat("sdg_07_60")
poverty <- filter(poverty.raw,
!(geo %in% aggregates),
!(geo %in% nonmembers),
incgrp == "TOTAL",
hhtyp == "TOTAL",
time > "2004-01-01") %>%
rename(share = values) %>%
select(geo, time, share)
# Ternary data
fossils <- read_excel("traffic_light_indicators_data.xlsx", sheet = "limit_fossil_fuels_buildings")
fossils$name <- countrycode(fossils$geo, origin = "eurostat", destination = "country.name")
fossils[is.na(fossils)] <- "No policy"
credibility = read_excel("traffic_light_indicators_data.xlsx", sheet = "credibility_renovation_strategy")
credibility$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
credibility <- credibility %>% rename(credibility.status = LTRS)
# Country codes
EU27 <- eu_grid1
# Replace UK with EU27, and swap Ireland with EU27, so the latter is on top
EU27 <- mutate(EU27, code = ifelse(code == "UK", "EU27_2020", code)) %>%
mutate(name = ifelse(name == "United Kingdom", "EU27", name)) %>%
mutate(row = ifelse(name == "Ireland", 2, row)) %>%
mutate(row = ifelse(name == "EU27", 1, row))
# Write everything to Excel
excel.name <- "../public/ECF-buildings-dashboard-data.xlsx"
# Delete the file if it exists, to make sure to recreate it
if (file.exists(excel.name)) {
file.remove(excel.name)
}
# Write all the csv files for the dashboard
write.csv(fec.gdp, file = "../public/data/fec-gdp.csv", row.names = FALSE)
write.csv(hh.all, file = "../public/data/fec-hh.csv", row.names = FALSE)
write.csv(hh.renew.wide, file = "../public/data/renew-hh.csv", row.names = FALSE)
write.csv(housing, file = "../public/data/housing.csv", row.names = FALSE)
write.csv(poverty, file = "../public/data/poverty.csv", row.names = FALSE)
write.csv(fossils, file = "../public/data/fossils.csv", row.names = FALSE)
write.csv(credibility, file = "../public/data/credibility.csv", row.names = FALSE)
write.csv(EU27, file = "../public/data/EU27.csv", row.names = FALSE)
write.csv(targets, file = "../public/data/targets.csv", row.names = FALSE)
excelSheets <- list("fec.gdp" = fec.gdp, "targets" = targets)
write.xlsx(excelSheets, excel.name)
# Write everything to Excel
excel.name <- "../public/ECF-buildings-dashboard-data.xlsx"
# Delete the file if it exists, to make sure to recreate it
if (file.exists(excel.name)) {
file.remove(excel.name)
}
excelSheets <- list(
"fec.gdp" = fec.gdp,
"targets" = targets,
"fec.households" = hh.all,
"fec.households.renewables" = hh.renew.wide,
"housing" = housing,
"poverty" = poverty,
"limit.fossils" = fossils,
"credibility" = credibility
)
write.xlsx(excelSheets, excel.name)
## Following packages need to be installed first with install.packages()
library(eurostat)
library(dplyr)
library(readxl)
library(countrycode)
library(tidyr)
library(openxlsx)
library(geofacet)
library(zoo)
aggregates <- c("EA19", "EU28")
nonmembers <- c("TR", "NO", "IS", "AL", "BA", "MD", "ME", "MK", "UA", "XK", "UK", "RS", "GE")
# Download the energy balance database from Eurostat. This takes a while, it is 230 MB
energy.balance.raw <- get_eurostat("nrg_bal_c")
# 1. Final energy consumption
# Filter the relevant data
fec <- filter(energy.balance.raw,
nrg_bal == "FEC2020-2030",
siec == "TOTAL",
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01",)
# Get the gdp data from Eurostat
gdp.raw <- get_eurostat("nama_10_gdp")
# Get the gdp data from Eurostat
gdp.raw <- get_eurostat("nama_10_gdp")
# Gross Domestic Product at Market Prices, 2010 prices in million euros
gdp <- filter(gdp.raw,
na_item == "B1GQ",
unit == "CLV10_MEUR",
time > "2004-01-01",) %>%
select(geo, time, gdp = values)
# Join FEC and GDP data together, based on country (geo) and year (time)
fec.gdp <- left_join(fec, gdp, by = c("geo", "time")) %>%
# Switch units from KTOE to MTOE
mutate(values = values/1000) %>%
# Ton oil equivalent per million euro gdp
mutate(relative = values/gdp*1000000) %>%
rename(absolute = values) %>%
select(geo, time, absolute, relative)
targets <- read_excel("all_benchmarks.xlsx")
# 3b. Impact of renovation strategies on the built environment
# Get heat demand data from Eurostat
heat.demand.raw <- get_eurostat("nrg_d_hhq")
heat.demand <- filter(heat.demand.raw, siec == "TOTAL") %>%
# Filter for household energy use, total and space heating
filter(nrg_bal %in% c("FC_OTH_HH_E", "FC_OTH_HH_E_SH")) %>%
filter(time == "2018-01-01") %>%
select(geo, nrg_bal, values) %>%
pivot_wider(names_from = nrg_bal, values_from = values) %>%
# "demand" is the share of household energy use used for space heating (in 2018)
mutate(demand = round(FC_OTH_HH_E_SH/FC_OTH_HH_E, 2)) %>%
select(geo, demand)
# Household energy use
hh <- filter(energy.balance.raw,
nrg_bal == "FC_OTH_HH_E",
siec == "TOTAL",
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01")
# Heating degree days factor
# Get heating degree days data from Eurostat
heatcool.raw <- get_eurostat("nrg_chdd_a")
heatdegreedays <- filter(heatcool.raw,
# Only take heating degree days
indic_nrg == "HDD",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "1989-01-01")
# Rolling means
hdd.rollmeans <- group_by(heatdegreedays, geo) %>%
arrange(time) %>%
mutate(lagvalues = lag(values, 1)) %>%
# 10 year rolling mean
mutate(rollavg = rollmean(lagvalues, k = 10, align = "right", fill = c(NA,NA,NA))) %>%
# hdd.ind (heating degree indicator) is the ratio between current year hdd and the average of the 10 years before
mutate(hdd.ind = round(values/rollavg, 2)) %>%
ungroup() %>%
filter(time > "2004-01-01") %>%
select(geo, time, hdd.ind)
# Population
# Get population data from Eurostat, and filter
pop.raw <- get_eurostat("demo_pjan")
pop <- filter(pop.raw,
age == "TOTAL",
sex == "T",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01") %>%
select(geo, time, pop = values)
# Join everything together
hh.all <- left_join(hh, hdd.rollmeans, by = c("geo", "time")) %>%
left_join(pop, by = c("geo", "time")) %>%
left_join(heat.demand, by = "geo") %>%
# Switch from KTOE to MTOE
mutate(values = values/1000) %>%
# Climate corrected values
mutate(climate = (values*demand/hdd.ind + values*(1-demand))) %>%
# Climate corrected values, in kg/capita
mutate(climatecapita = climate/pop*1000000000) %>%
rename(absolute = values) %>%
select(geo, time, absolute, climate, climatecapita)
# 4. Share of renewables, with and without biomass
siec.values <- c("TOTAL", "RA000", "RA200", "RA410", "RA600")
hh.renew <- filter(energy.balance.raw,
nrg_bal == "FC_OTH_HH_E",
siec %in% siec.values,
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01")
hh.renew.wide <- pivot_wider(hh.renew, names_from = siec, values_from = values) %>%
mutate(share = round(RA000/TOTAL*100, 1)) %>%
## RA200 = Geothermal, RA410 = Solarthermal, RA600 = Ambient heat
mutate(sharenobiom = round((RA200 + RA410 + RA600)/TOTAL*100, 1)) %>%
select(geo, time, share, sharenobiom)
# 5. Housing and energy poverty
# Get the data on bad housing conditions from Eurostat, and filter
housing.raw <- get_eurostat("ilc_mdho01")
housing <- filter(housing.raw,
sex == "T",
age == "TOTAL",
!(geo %in% aggregates),
!(geo %in% nonmembers),
incgrp == "TOTAL",
hhtyp == "TOTAL",
time > "2004-01-01") %>%
rename(share = values) %>%
select(geo, time, share)
# Get the data on energy poverty from Eurostat, and filter
poverty.raw <- get_eurostat("sdg_07_60")
poverty <- filter(poverty.raw,
!(geo %in% aggregates),
!(geo %in% nonmembers),
incgrp == "TOTAL",
hhtyp == "TOTAL",
time > "2004-01-01") %>%
rename(share = values) %>%
select(geo, time, share)
# Ternary data
fossils <- read_excel("traffic_light_indicators_data.xlsx", sheet = "limit_fossil_fuels_buildings")
fossils$name <- countrycode(fossils$geo, origin = "eurostat", destination = "country.name")
fossils[is.na(fossils)] <- "No policy"
credibility = read_excel("traffic_light_indicators_data.xlsx", sheet = "credibility_renovation_strategy")
credibility$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
credibility <- credibility %>% rename(credibility.status = LTRS)
# Country codes
EU27 <- eu_grid1
# Replace UK with EU27, and swap Ireland with EU27, so the latter is on top
EU27 <- mutate(EU27, code = ifelse(code == "UK", "EU27_2020", code)) %>%
mutate(name = ifelse(name == "United Kingdom", "EU27", name)) %>%
mutate(row = ifelse(name == "Ireland", 2, row)) %>%
mutate(row = ifelse(name == "EU27", 1, row))
# Write everything to Excel
excel.name <- "../public/ECF-buildings-dashboard-data.xlsx"
# Delete the file if it exists, to make sure to recreate it
if (file.exists(excel.name)) {
file.remove(excel.name)
}
excelSheets <- list(
"fec.gdp" = fec.gdp,
"targets" = targets,
"fec.households" = hh.all,
"fec.households.renewables" = hh.renew.wide,
"housing" = housing,
"poverty" = poverty,
"limit.fossils" = fossils,
"credibility" = credibility
)
write.xlsx(excelSheets, excel.name)
# Write all the csv files for the dashboard
write.csv(fec.gdp, file = "../public/data/fec-gdp.csv", row.names = FALSE)
write.csv(hh.all, file = "../public/data/fec-hh.csv", row.names = FALSE)
write.csv(hh.renew.wide, file = "../public/data/renew-hh.csv", row.names = FALSE)
write.csv(housing, file = "../public/data/housing.csv", row.names = FALSE)
write.csv(poverty, file = "../public/data/poverty.csv", row.names = FALSE)
write.csv(fossils, file = "../public/data/fossils.csv", row.names = FALSE)
write.csv(credibility, file = "../public/data/credibility.csv", row.names = FALSE)
write.csv(EU27, file = "../public/data/EU27.csv", row.names = FALSE)
write.csv(targets, file = "../public/data/targets.csv", row.names = FALSE)
# Ternary data
fossils <- read_excel("traffic_light_indicators_data.xlsx", sheet = "limit_fossil_fuels_buildings")
fossils$name <- countrycode(fossils$geo, origin = "eurostat", destination = "country.name")
fossils[is.na(fossils)] <- "No policy"
credibility = read_excel("traffic_light_indicators_data.xlsx", sheet = "credibility_renovation_strategy")
credibility$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
credibility <- credibility %>% rename(credibility.status = LTRS)
write.csv(fossils, file = "../public/data/fossils.csv", row.names = FALSE)
write.csv(credibility, file = "../public/data/credibility.csv", row.names = FALSE)
ambition <- read_excel("traffic_light_indicators_data.xlsx", sheet = "ambition_NECP_EE_FEC")
View(ambition)
ambition <- select(ambition, -url)
ambition <- read_excel("traffic_light_indicators_data.xlsx", sheet = "ambition_NECP_EE_FEC")
ambition <- read_excel("traffic_light_indicators_data.xlsx", sheet = "ambition_NECP_EE_FEC")
ambition$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
ambition <- select(ambition, -url)
# Write everything to Excel
excel.name <- "../public/ECF-buildings-dashboard-data.xlsx"
# Delete the file if it exists, to make sure to recreate it
if (file.exists(excel.name)) {
file.remove(excel.name)
}
excelSheets <- list(
"fec.gdp" = fec.gdp,
"targets" = targets,
"fec.households" = hh.all,
"fec.households.renewables" = hh.renew.wide,
"housing" = housing,
"poverty" = poverty,
"limit.fossils" = fossils,
"credibility" = credibility,
"ambition" = ambition
)
write.xlsx(excelSheets, excel.name)
write.csv(ambition, file = "../public/data/ambition.csv", row.names = FALSE)
## Following packages need to be installed first with install.packages()
library(eurostat)
library(dplyr)
library(readxl)
library(countrycode)
library(tidyr)
library(openxlsx)
library(geofacet)
library(zoo)
aggregates <- c("EA19", "EU28")
nonmembers <- c("TR", "NO", "IS", "AL", "BA", "MD", "ME", "MK", "UA", "XK", "UK", "RS", "GE")
# Download the energy balance database from Eurostat. This takes a while, it is 230 MB
energy.balance.raw <- get_eurostat("nrg_bal_c")
# 1. Final energy consumption
# Filter the relevant data
fec <- filter(energy.balance.raw,
nrg_bal == "FEC2020-2030",
siec == "TOTAL",
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01",)
# Get the gdp data from Eurostat
gdp.raw <- get_eurostat("nama_10_gdp")
# Gross Domestic Product at Market Prices, 2010 prices in million euros
gdp <- filter(gdp.raw,
na_item == "B1GQ",
unit == "CLV10_MEUR",
time > "2004-01-01",) %>%
select(geo, time, gdp = values)
# Join FEC and GDP data together, based on country (geo) and year (time)
fec.gdp <- left_join(fec, gdp, by = c("geo", "time")) %>%
# Switch units from KTOE to MTOE
mutate(values = values/1000) %>%
# Ton oil equivalent per million euro gdp
mutate(relative = values/gdp*1000000) %>%
rename(absolute = values) %>%
select(geo, time, absolute, relative)
targets <- read_excel("all_benchmarks.xlsx")
# 3b. Impact of renovation strategies on the built environment
# Get heat demand data from Eurostat
heat.demand.raw <- get_eurostat("nrg_d_hhq")
heat.demand <- filter(heat.demand.raw, siec == "TOTAL") %>%
# Filter for household energy use, total and space heating
filter(nrg_bal %in% c("FC_OTH_HH_E", "FC_OTH_HH_E_SH")) %>%
filter(time == "2018-01-01") %>%
select(geo, nrg_bal, values) %>%
pivot_wider(names_from = nrg_bal, values_from = values) %>%
# "demand" is the share of household energy use used for space heating (in 2018)
mutate(demand = round(FC_OTH_HH_E_SH/FC_OTH_HH_E, 2)) %>%
select(geo, demand)
# Household energy use
hh <- filter(energy.balance.raw,
nrg_bal == "FC_OTH_HH_E",
siec == "TOTAL",
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01")
# Heating degree days factor
# Get heating degree days data from Eurostat
heatcool.raw <- get_eurostat("nrg_chdd_a")
heatdegreedays <- filter(heatcool.raw,
# Only take heating degree days
indic_nrg == "HDD",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "1989-01-01")
# Rolling means
hdd.rollmeans <- group_by(heatdegreedays, geo) %>%
arrange(time) %>%
mutate(lagvalues = lag(values, 1)) %>%
# 10 year rolling mean
mutate(rollavg = rollmean(lagvalues, k = 10, align = "right", fill = c(NA,NA,NA))) %>%
# hdd.ind (heating degree indicator) is the ratio between current year hdd and the average of the 10 years before
mutate(hdd.ind = round(values/rollavg, 2)) %>%
ungroup() %>%
filter(time > "2004-01-01") %>%
select(geo, time, hdd.ind)
# Population
# Get population data from Eurostat, and filter
pop.raw <- get_eurostat("demo_pjan")
pop <- filter(pop.raw,
age == "TOTAL",
sex == "T",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01") %>%
select(geo, time, pop = values)
# Join everything together
hh.all <- left_join(hh, hdd.rollmeans, by = c("geo", "time")) %>%
left_join(pop, by = c("geo", "time")) %>%
left_join(heat.demand, by = "geo") %>%
# Switch from KTOE to MTOE
mutate(values = values/1000) %>%
# Climate corrected values
mutate(climate = (values*demand/hdd.ind + values*(1-demand))) %>%
# Climate corrected values, in kg/capita
mutate(climatecapita = climate/pop*1000000000) %>%
rename(absolute = values) %>%
select(geo, time, absolute, climate, climatecapita)
# 4. Share of renewables, with and without biomass
siec.values <- c("TOTAL", "RA000", "RA200", "RA410", "RA600")
hh.renew <- filter(energy.balance.raw,
nrg_bal == "FC_OTH_HH_E",
siec %in% siec.values,
unit == "KTOE",
!(geo %in% aggregates),
!(geo %in% nonmembers),
time > "2004-01-01")
hh.renew.wide <- pivot_wider(hh.renew, names_from = siec, values_from = values) %>%
mutate(share = round(RA000/TOTAL*100, 1)) %>%
## RA200 = Geothermal, RA410 = Solarthermal, RA600 = Ambient heat
mutate(sharenobiom = round((RA200 + RA410 + RA600)/TOTAL*100, 1)) %>%
select(geo, time, share, sharenobiom)
# 5. Housing and energy poverty
# Get the data on bad housing conditions from Eurostat, and filter
housing.raw <- get_eurostat("ilc_mdho01")
housing <- filter(housing.raw,
sex == "T",
age == "TOTAL",
!(geo %in% aggregates),
!(geo %in% nonmembers),
incgrp == "TOTAL",
hhtyp == "TOTAL",
time > "2004-01-01") %>%
rename(share = values) %>%
select(geo, time, share)
# Get the data on energy poverty from Eurostat, and filter
poverty.raw <- get_eurostat("sdg_07_60")
poverty <- filter(poverty.raw,
!(geo %in% aggregates),
!(geo %in% nonmembers),
incgrp == "TOTAL",
hhtyp == "TOTAL",
time > "2004-01-01") %>%
rename(share = values) %>%
select(geo, time, share)
# Ternary data
fossils <- read_excel("traffic_light_indicators_data.xlsx", sheet = "limit_fossil_fuels_buildings")
fossils$name <- countrycode(fossils$geo, origin = "eurostat", destination = "country.name")
fossils[is.na(fossils)] <- "No policy"
credibility = read_excel("traffic_light_indicators_data.xlsx", sheet = "credibility_renovation_strategy")
credibility$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
credibility <- credibility %>% rename(credibility.status = LTRS)
ambition <- read_excel("traffic_light_indicators_data.xlsx", sheet = "ambition_NECP_EE_FEC")
ambition$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
ambition <- select(ambition, -url)
ambition <- read_excel("traffic_light_indicators_data.xlsx", sheet = "ambition_NECP_EE_FEC")
View(ambition)
ambition$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
ambition <- select(ambition, -...3)
View(ambition)
ambition <- read_excel("traffic_light_indicators_data.xlsx", sheet = "ambition_NECP_EE_FEC")
ambition$name <- countrycode(credibility$geo, origin = "eurostat", destination = "country.name")
ambition <- select(ambition, -...3) %>%
rename(ee.fec.necp = `EE FEC NECP`, eed.recast = `EED recast`)
# Country codes
EU27 <- eu_grid1
# Replace UK with EU27, and swap Ireland with EU27, so the latter is on top
EU27 <- mutate(EU27, code = ifelse(code == "UK", "EU27_2020", code)) %>%
mutate(name = ifelse(name == "United Kingdom", "EU27", name)) %>%
mutate(row = ifelse(name == "Ireland", 2, row)) %>%
mutate(row = ifelse(name == "EU27", 1, row))
# Write everything to Excel
excel.name <- "../public/ECF-buildings-dashboard-data.xlsx"
# Delete the file if it exists, to make sure to recreate it
if (file.exists(excel.name)) {
file.remove(excel.name)
}
excelSheets <- list(
"fec.gdp" = fec.gdp,
"targets" = targets,
"fec.households" = hh.all,
"fec.households.renewables" = hh.renew.wide,
"housing" = housing,
"poverty" = poverty,
"limit.fossils" = fossils,
"credibility" = credibility,
"ambition" = ambition
)
write.xlsx(excelSheets, excel.name)
# Write all the csv files for the dashboard
write.csv(fec.gdp, file = "../public/data/fec-gdp.csv", row.names = FALSE)
write.csv(hh.all, file = "../public/data/fec-hh.csv", row.names = FALSE)
write.csv(hh.renew.wide, file = "../public/data/renew-hh.csv", row.names = FALSE)
write.csv(housing, file = "../public/data/housing.csv", row.names = FALSE)
write.csv(poverty, file = "../public/data/poverty.csv", row.names = FALSE)
write.csv(fossils, file = "../public/data/fossils.csv", row.names = FALSE)
write.csv(credibility, file = "../public/data/credibility.csv", row.names = FALSE)
write.csv(ambition, file = "../public/data/ambition.csv", row.names = FALSE)
write.csv(EU27, file = "../public/data/EU27.csv", row.names = FALSE)
write.csv(targets, file = "../public/data/targets.csv", row.names = FALSE)
